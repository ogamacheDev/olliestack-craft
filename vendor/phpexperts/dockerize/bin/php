#!/bin/bash
#####################################################################
#   The Dockerize PHP Project                                       #
#   https://github.com/PHPExpertsInc/docker-php                     #
#   License: MIT                                                    #
#                                                                   #
#   Copyright Â© 2024 PHP Experts, Inc. <sales@phpexperts.pro>       #
#       Author: Theodore R. Smith <theodore@phpexperts.pro>         #
#      PGP Sig: 4BF826131C3487ACD28F2AD8EB24A91DD6125690            #
#####################################################################

# @see https://linuxize.com/post/how-to-check-if-string-contains-substring-in-bash/
# @see https://github.com/composer/composer/issues/10389
SUB="/vendor/"
if [[ "$0" == *"$SUB"* ]]; then
  ROOT="$(readlink -f /proc/$PPID/cwd)"
else
  ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
fi

ORIG_PHP_VERSION=$PHP_VERSION
if [ -f "${ROOT}/.env" ]; then
    source "${ROOT}/.env"
    if [ ! -z "$ORIG_PHP_VERSION" ]; then
        PHP_VERSION="$ORIG_PHP_VERSION"
    fi
fi

# Detect if it's running inside of docker and run it natively if it is.
# @see https://stackoverflow.com/a/25518345/430062
if [ "$PHP_VERSION" == "native" ] || [ -f "/.dockerenv" ]; then
  PATH=/usr/bin php "$@"
  exit $?
fi

if [ -z "$PHP_VERSION" ]; then
    PHP_VERSION="8.1"
fi

if [ -z "$PROJECT_NAME" ]; then
    PROJECT_NAME=$(basename $ROOT | tr '[:upper:]' '[:lower:]' | sed "s/[^[:alpha:]-]//g")
fi
if [ -z "$NETWORK_NAME" ]; then
    NETWORK_NAME=${PROJECT_NAME}_default
fi

# Test if the network exists.
NETWORK_STRING="--network=host"
docker network inspect "$NETWORK_NAME" > /dev/null 2>&1
if [ $? == 0 ]; then
    NETWORK_STRING="--network=$NETWORK_NAME"
fi

# Detect if the PHP container is running already...
# If it is running, use it directly.
if [ "$(docker top "${PROJECT_NAME}"${PHP_VERSION} 2> /dev/null)" ]; then
    # shellcheck disable=SC2086
    # This is broken...
    #docker run --name "${PROJECT_NAME}"${PHP_VERSION} "${NETWORK_STRING}" --env XDEBUG_SESSION --env XDEBUG_CONFIG -u=$UID -v $HOME:$HOME -v "$PWD":$PWD -v /etc/passwd:/etc/passwd:ro -v "$PWD":/workdir --rm -t phpexperts/php:${PHP_VERSION} &

    # Wait for the docker process to be created.
    while [ ! "$(docker top "${PROJECT_NAME}"${PHP_VERSION} 2> /dev/null)" ]; do
#        echo "Waiting for the phpexperts_php${PHP_VERSION} container to start..."
        sleep 0.5
    done

    # Run the command directly from the container for faster and more performant execution.
    if [ "$1" == "bash" ] || [ "$1" == "composer" ]; then
        docker exec -it "${PROJECT_NAME}"${PHP_VERSION} "$@"
    else
        docker exec -it "${PROJECT_NAME}"${PHP_VERSION} php "$@"
    fi

    exit
fi

TTY_OPTS='-t'
if [ -t 0 ]; then
    # Input is from a terminal
    TTY_OPTS="-it"
fi

if [ "$1" == "dockerize" ]; then
    docker run -u=$UID -v "$PWD":/workdir --rm -it --network=host --entrypoint=install.sh phpexperts/php:${PHP_VERSION}
    exit
fi


docker run ${NETWORK_STRING} --env XDEBUG_SESSION --env XDEBUG_CONFIG -u=$UID \
    -v $HOME:$HOME -v "$PWD":"$PWD" -w "$PWD" -v /etc/passwd:/etc/passwd:ro \
    --rm ${TTY_OPTS} phpexperts/php:${PHP_VERSION} "$@"
